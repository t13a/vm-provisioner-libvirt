# Generated by Virtual Machine Provisioner for libvirt v0.1.0 (v1alpha1)

.DELETE_ON_ERROR:
MAKEFLAGS += --no-builtin-rules --no-builtin-variables --warn-undefined-variables
SHELL := bash -euo pipefail

V1ALPHA1_IP_CMD = virsh domifaddr vm1 | grep -Eo '[0-9.]+/[0-9]+' | cut -d/ -f1 | head -n1
V1ALPHA1_SSH_EXTRA_OPTS = 
V1ALPHA1_SSH_HOST = $$($(V1ALPHA1_IP_CMD))
V1ALPHA1_SSH_OPTS = -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
V1ALPHA1_SSH_USER = ubuntu
V1ALPHA1_WAIT_FOR_READY_INTERVAL_SECS = 3
V1ALPHA1_WAIT_FOR_READY_SSH_CONNECT_TIMEOUT_SECS = 3

export LIBVIRT_DEFAULT_URI := qemu:///system
export SSHPASS := P@ssw0rd

.PHONY: up
up: build create start

.PHONY: down
down: stop delete clean

.PHONY: build
build: ../.images/ubuntu-cloud-24.04-amd64.qcow2 vm1-seed.iso

../.images/ubuntu-cloud-24.04-amd64.qcow2:
	mkdir -p $(@D) && curl -L https://cloud-images.ubuntu.com/releases/24.04/release/ubuntu-24.04-server-cloudimg-amd64.img -o $(@)

vm1-seed.iso: $(wildcard vm1-seed.iso.d/*)
	mkdir -p $(@D) && mkisofs -output $(@) -volid cidata -joliet -rock $(^)

.PHONY: clean
clean:
	rm -f vm1-seed.iso

.PHONY: clean-all
clean-all: clean
	rm -f ../.images/ubuntu-cloud-24.04-amd64.qcow2

.PHONY: create
create: create/pool create/volume create/domain

.PHONY: create/pool
create/pool: create/pool/vm1

.PHONY: create/pool/vm1
create/pool/vm1:
	$(call create_libvirt_pool,vm1,/var/lib/libvirt/images/vm1)

.PHONY: create/volume
create/volume: create/volume/default/ubuntu-cloud-24.04-amd64.qcow2 create/volume/vm1/vm1-boot.qcow2 create/volume/vm1/vm1-seed.iso

.PHONY: create/volume/default/ubuntu-cloud-24.04-amd64.qcow2
create/volume/default/ubuntu-cloud-24.04-amd64.qcow2: ../.images/ubuntu-cloud-24.04-amd64.qcow2
	$(call create_libvirt_volume_from_upload_file,default,ubuntu-cloud-24.04-amd64.qcow2,,qcow2,../.images/ubuntu-cloud-24.04-amd64.qcow2)

.PHONY: create/volume/vm1/vm1-boot.qcow2
create/volume/vm1/vm1-boot.qcow2: start/pool/vm1
	$(call create_libvirt_volume_from_backing_volume,vm1,vm1-boot.qcow2,,qcow2,default,ubuntu-cloud-24.04-amd64.qcow2,qcow2)

.PHONY: create/volume/vm1/vm1-seed.iso
create/volume/vm1/vm1-seed.iso: start/pool/vm1 vm1-seed.iso
	$(call create_libvirt_volume_from_upload_file,vm1,vm1-seed.iso,,raw,vm1-seed.iso)

.PHONY: create/domain
create/domain: , = ,
create/domain:
	$(call create_libvirt_domain,vm1,virt-install \
		--disk=format=qcow2$(,)vol=vm1/vm1-boot.qcow2 \
		--disk=device=cdrom$(,)format=raw$(,)vol=vm1/vm1-seed.iso \
		--graphics=none \
		--memory=2048 \
		--network=network=default \
		--osinfo=linux2022 \
		--vcpus=2 \
		--name=vm1 \
		--print-xml \
		--dry-run)

.PHONY: delete
delete:  delete/domain delete/volume delete/pool

.PHONY: delete-all
delete-all: delete delete/volume-all delete/pool-all

.PHONY: delete/domain
delete/domain: stop/domain
	$(call delete_libvirt_domain,vm1)

.PHONY: delete/volume
delete/volume: delete/volume/vm1/vm1-boot.qcow2 delete/volume/vm1/vm1-seed.iso

.PHONY: delete/volume-all
delete/volume-all: delete/volume delete/volume/default/ubuntu-cloud-24.04-amd64.qcow2

.PHONY: delete/volume/default/ubuntu-cloud-24.04-amd64.qcow2
delete/volume/default/ubuntu-cloud-24.04-amd64.qcow2:
	$(call delete_libvirt_volume,default,ubuntu-cloud-24.04-amd64.qcow2)

.PHONY: delete/volume/vm1/vm1-boot.qcow2
delete/volume/vm1/vm1-boot.qcow2:
	$(call delete_libvirt_volume,vm1,vm1-boot.qcow2)

.PHONY: delete/volume/vm1/vm1-seed.iso
delete/volume/vm1/vm1-seed.iso:
	$(call delete_libvirt_volume,vm1,vm1-seed.iso)

.PHONY: delete/pool
delete/pool: delete/pool/vm1

.PHONY: delete/pool-all
delete/pool-all: delete/pool

.PHONY: delete/pool/vm1
delete/pool/vm1: stop/pool/vm1
	$(call delete_libvirt_pool,vm1)

.PHONY: start
start: start/pool start/domain

.PHONY: start/pool
start/pool: start/pool/vm1

.PHONY: start/pool/vm1
start/pool/vm1:
	$(call start_libvirt_pool,vm1)

.PHONY: start/domain
start/domain:
	$(call start_libvirt_domain,vm1)

.PHONY: stop
stop: stop/domain

.PHONY: stop/domain
stop/domain:
	$(call stop_libvirt_domain,vm1)

.PHONY: stop-all
stop-all: stop stop/pool

.PHONY: stop/pool
stop/pool: stop/pool/vm1

.PHONY: stop/pool/vm1
stop/pool/vm1:
	$(call stop_libvirt_pool,vm1)

.PHONY: wait-for-ready
wait-for-ready: wait-for-ready/ip wait-for-ready/ssh

.PHONY: wait-for-ready/ip
wait-for-ready/ip:
	until $(V1ALPHA1_IP_CMD); do sleep $(V1ALPHA1_WAIT_FOR_READY_INTERVAL_SECS); done

.PHONY: wait-for-ready/ssh
wait-for-ready/ssh:
	until sshpass -e ssh $(V1ALPHA1_SSH_OPTS) $(V1ALPHA1_SSH_EXTRA_OPTS) -o ConnectTimeout=$(V1ALPHA1_WAIT_FOR_READY_SSH_CONNECT_TIMEOUT_SECS) $(V1ALPHA1_SSH_USER)@$(V1ALPHA1_SSH_HOST) cloud-init status --wait; do sleep $(V1ALPHA1_WAIT_FOR_READY_INTERVAL_SECS); done

.PHONY: exec
exec: CMD := bash
exec:
	@exec $(CMD)

.PHONY: console
console:
	@virsh console --force vm1

.PHONY: ip
ip:
	@$(V1ALPHA1_IP_CMD)

.PHONY: ssh
ssh: CMD :=
ssh:
	@sshpass -e ssh $(V1ALPHA1_SSH_OPTS) $(V1ALPHA1_SSH_EXTRA_OPTS) $(V1ALPHA1_SSH_USER)@$(V1ALPHA1_SSH_HOST) $(CMD)

define create_libvirt_domain
virsh list --all --name --persistent | ( \
	if ! grep -q '^\s*$(1)\s*$$'; \
	then \
		$(2) | tee /dev/stderr | virsh define /dev/stdin; \
	fi \
)
endef

define delete_libvirt_domain
virsh list --all --name --persistent | ( \
	if grep -q '^\s*$(1)\s*$$'; \
	then \
		virsh undefine $(1); \
	fi \
)
endef

define start_libvirt_domain
virsh list --name | ( \
	if ! grep -q '^\s*$(1)\s*$$'; \
	then \
		virsh start $(1); \
	fi \
)
endef

define stop_libvirt_domain
virsh list --name | ( \
	if grep -q '^\s*$(1)\s*$$'; \
	then \
		virsh destroy $(1); \
	fi \
)
endef

define create_libvirt_pool
virsh pool-list --all --name --persistent | ( \
	if ! grep -q '^\s*$(1)\s*$$'; \
	then \
		virsh pool-define-as $(1) dir --target $(2); \
		virsh pool-autostart $(1); \
	fi \
)
endef

define delete_libvirt_pool
virsh pool-list --all --name --persistent | ( \
	if grep -q '^\s*$(1)\s*$$'; \
	then \
		virsh pool-undefine $(1); \
	fi \
)
endef

define start_libvirt_pool
virsh pool-list --name | ( \
	if ! grep -q '^\s*$(1)\s*$$'; \
	then \
		virsh pool-start --build $(1); \
	fi \
)
endef

define stop_libvirt_pool
virsh pool-list --name | ( \
	if grep -q '^\s*$(1)\s*$$'; \
	then \
		virsh pool-destroy $(1); \
	fi \
)
endef

define create_libvirt_volume_from_backing_volume
virsh vol-list $(1) | tail -n +3 | ( \
	if ! grep -q '^\s*$(2)\s'; \
	then \
		BACKING_VOL="$$(virsh vol-path $(6) --pool $(5))"; \
		CAPACITY="$$([ -n "$(3)" ] && echo $(3) || virsh vol-dumpxml $(6) --pool $(5) --xpath '/volume/capacity/text()' | grep -o '\w*')"; \
		virsh vol-create-as $(1) $(2) $${CAPACITY} --format $(4) --backing-vol $${BACKING_VOL} --backing-vol-format $(7); \
	fi \
)
endef

define create_libvirt_volume_from_upload_file
virsh vol-list $(1) | tail -n +3 | ( \
	if ! grep -q '^\s*$(2)\s'; \
	then \
		CAPACITY="$$([ -n "$(3)" ] && echo $(3) || stat -Lc%s $(5))"; \
		virsh vol-create-as $(1) $(2) $${CAPACITY} --format $(4); \
		virsh vol-upload $(2) $(5) --pool $(1); \
	fi \
)
endef

define delete_libvirt_volume
virsh pool-list --all --name --persistent | ( \
	if grep -q '^\s*$(1)\s*$$'; \
	then \
		virsh vol-list $(1) | tail -n +3 | ( \
			if grep -q '^\s*$(2)\s'; \
			then \
				virsh vol-delete $(2) --pool $(1); \
			fi \
		); \
	fi \
)
endef