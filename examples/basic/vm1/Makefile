# Generated by Virtual Machine Provisioner for libvirt v0.1.1 (v1alpha1)

.DELETE_ON_ERROR:
MAKEFLAGS += --no-builtin-rules --no-builtin-variables --warn-undefined-variables
SHELL := bash -euo pipefail

V1ALPHA1_IP_CMD = virsh domifaddr vm1 | grep -Eo '[0-9.]+/[0-9]+' | cut -d/ -f1 | head -n1

export LIBVIRT_DEFAULT_URI := qemu:///system

.PHONY: up
up: build create start

.PHONY: down
down: stop delete clean

.PHONY: build
build: .images/alpine-virt-3.20.3-x86_64.iso

.images/alpine-virt-3.20.3-x86_64.iso:
	mkdir -p $(@D) && curl -L https://dl-cdn.alpinelinux.org/alpine/v3.20/releases/x86_64/alpine-virt-3.20.3-x86_64.iso -o $(@)

.PHONY: clean
clean:
	rm -f

.PHONY: clean-all
clean-all: clean
	rm -f .images/alpine-virt-3.20.3-x86_64.iso

.PHONY: create
create: create/volume create/domain

.PHONY: create/volume
create/volume: create/volume/default/alpine-virt-3.20.3-x86_64.iso

.PHONY: create/volume/default/alpine-virt-3.20.3-x86_64.iso
create/volume/default/alpine-virt-3.20.3-x86_64.iso: .images/alpine-virt-3.20.3-x86_64.iso
	$(call create_libvirt_volume_from_upload_file,default,alpine-virt-3.20.3-x86_64.iso,,qcow2,.images/alpine-virt-3.20.3-x86_64.iso)

.PHONY: create/domain
create/domain: , = ,
create/domain:
	$(call create_libvirt_domain,vm1,virt-install \
		--disk=device=cdrom$(,)format=qcow2$(,)vol=default/alpine-virt-3.20.3-x86_64.iso \
		--memory=2048 \
		--network=network=default \
		--osinfo=linux2022 \
		--vcpus=2 \
		--name=vm1 \
		--print-xml \
		--dry-run)

.PHONY: delete
delete:  delete/domain delete/volume

.PHONY: delete-all
delete-all: delete delete/volume-all

.PHONY: delete/domain
delete/domain: stop/domain
	$(call delete_libvirt_domain,vm1)

.PHONY: delete/volume
delete/volume:

.PHONY: delete/volume-all
delete/volume-all: delete/volume delete/volume/default/alpine-virt-3.20.3-x86_64.iso

.PHONY: delete/volume/default/alpine-virt-3.20.3-x86_64.iso
delete/volume/default/alpine-virt-3.20.3-x86_64.iso:
	$(call delete_libvirt_volume,default,alpine-virt-3.20.3-x86_64.iso)

.PHONY: start
start: start/domain

.PHONY: start/domain
start/domain:
	$(call start_libvirt_domain,vm1)

.PHONY: stop
stop: stop/domain

.PHONY: stop/domain
stop/domain:
	$(call stop_libvirt_domain,vm1)

.PHONY: stop-all
stop-all: stop

.PHONY: exec
exec: CMD := bash
exec:
	@exec $(CMD)

.PHONY: console
console:
	@virsh console --force vm1

.PHONY: ip
ip:
	@$(V1ALPHA1_IP_CMD)

define create_libvirt_domain
virsh list --all --name --persistent | ( \
	if ! grep -q '^\s*$(1)\s*$$'; \
	then \
		$(2) | tee /dev/stderr | virsh define /dev/stdin; \
	fi \
)
endef

define delete_libvirt_domain
virsh list --all --name --persistent | ( \
	if grep -q '^\s*$(1)\s*$$'; \
	then \
		virsh undefine $(1); \
	fi \
)
endef

define start_libvirt_domain
virsh list --name | ( \
	if ! grep -q '^\s*$(1)\s*$$'; \
	then \
		virsh start $(1); \
	fi \
)
endef

define stop_libvirt_domain
virsh list --name | ( \
	if grep -q '^\s*$(1)\s*$$'; \
	then \
		virsh destroy $(1); \
	fi \
)
endef

define create_libvirt_volume_from_upload_file
virsh vol-list $(1) | tail -n +3 | ( \
	if ! grep -q '^\s*$(2)\s'; \
	then \
		CAPACITY="$$([ -n "$(3)" ] && echo $(3) || stat -Lc%s $(5))"; \
		virsh vol-create-as $(1) $(2) $${CAPACITY} --format $(4); \
		virsh vol-upload $(2) $(5) --pool $(1); \
	fi \
)
endef

define delete_libvirt_volume
virsh pool-list --all --name --persistent | ( \
	if grep -q '^\s*$(1)\s*$$'; \
	then \
		virsh vol-list $(1) | tail -n +3 | ( \
			if grep -q '^\s*$(2)\s'; \
			then \
				virsh vol-delete $(2) --pool $(1); \
			fi \
		); \
	fi \
)
endef