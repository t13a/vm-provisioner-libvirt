{%- set vars = config.vars -%}
{%- set connection = config.node.libvirt.connection -%}
{%- set image = config.image -%}
{%- set image_file = "{}/{}".format(vars["DEFAULT_IMAGE_DIR"], image.volumeName) -%}
{%- set image_archive_file = "{}.{}".format(image_file, image.archive.type) if image.archive else None -%}
{%- set domain = config.vm.libvirt.domain -%}
{%- set pools = config.vm.libvirt.pools -%}
{%- set volumes = config.vm.libvirt.volumes -%}
{%- set cloudInit = config.vm.cloudInit -%}
{%- set ssh = config.vm.ssh -%}
{%- set ssh_cmd = "{}ssh $(V1ALPHA1_SSH_OPTS) $(V1ALPHA1_SSH_EXTRA_OPTS)".format("sshpass -f sshpass " if ssh.password else "") -%}
# Generated by Virtual Machine Provisioner for libvirt v{{ version }} ({{ config.vm.provisioner }})

.DELETE_ON_ERROR:
MAKEFLAGS += --no-builtin-rules --no-builtin-variables --warn-undefined-variables
SHELL := bash -euo pipefail
{% for k, v in dict_merge(
	{
		"V1ALPHA1_IP_CMD": "virsh domifaddr {} | grep -Eo '[0-9.]+/[0-9]+' | cut -d/ -f1 | head -n1".format(domain.name),
	},
	{
		"V1ALPHA1_SSH_EXTRA_OPTS": "",
		"V1ALPHA1_SSH_HOST": ssh.host if ssh.host else "$$($(V1ALPHA1_IP_CMD))",
		"V1ALPHA1_SSH_OPTS": " ".join((["-J", urlparse(connection.uri).netloc] if urlparse(connection.uri).scheme.endswith("+ssh") else []) + ssh_option_args()),
		"V1ALPHA1_SSH_USER": ssh.user if ssh.user else "$$(id -un)",
		"V1ALPHA1_WAIT_FOR_READY_INTERVAL_SECS": "3",
		"V1ALPHA1_WAIT_FOR_READY_SSH_CONNECT_TIMEOUT_SECS": "3",
	} if ssh else {},
	vars
) | dictsort if k.startswith("V1ALPHA1_") %}
{{ k }} = {{ v }}
{%- endfor %}

export LIBVIRT_DEFAULT_URI := {{ connection.uri }}

.PHONY: up
up: build create start

.PHONY: down
down: stop delete clean

.PHONY: build
build: {{ image_file }}{%- if cloudInit %} {{ cloudInit.noCloud.seed.path }}{% endif %}
{%- if image.archive %}

{{ image_file }}: {{ image_archive_file }}
	{%- if image.archive.type == "7z" %}
	7z e -so -t7z $(<){% if image.archive.path %} {{ image.archive.path }}{% endif %} > $(@)
	{%- elif image.archive.type == "xz" %}
	xz -dc -F xz{% if image.archive.path %} {{ image.archive.path }}{% endif %} $(<) > $(@)
	{%- else %}
	$(error {{ image.archive.type }}: Unsupported archive type.)
	exit 1
	{%- endif %}

{{ image_archive_file }}:
	mkdir -p $(@D) && curl -L {{ image.url }} -o $(@)
{%- else %}

{{ image_file }}:
	mkdir -p $(@D) && curl -L {{ image.url }} -o $(@)
{%- endif %}
{%- if cloudInit %}

{{ cloudInit.noCloud.seed.path }}: $(wildcard {{ cloudInit.noCloud.seed.path }}.d/*)
	mkdir -p $(@D) && mkisofs -output $(@) -volid cidata -joliet -rock $(^)
{%- endif %}

.PHONY: clean
clean:
	rm -f{%- if cloudInit %} {{ cloudInit.noCloud.seed.path }}{% endif %}

.PHONY: clean-all
clean-all: clean
	rm -f {{ image_file }}{%- if image_archive_file %} {{ image_archive_file }}{% endif %}

.PHONY: create
create:{% if pools | length > 0 %} create/pool{% endif %}{% if volumes | length > 0 %} create/volume{% endif %} create/domain
{%- if pools | length > 0 %}

.PHONY: create/pool
create/pool:{% for pool in pools %} create/pool/{{ pool.name }}{% endfor %}
{%- endif %}
{%- for pool in pools %}

.PHONY: create/pool/{{ pool.name }}
create/pool/{{ pool.name }}:
	$(call create_libvirt_pool,{{ pool.name }},{{ pool.directory.path }})
{%- endfor %}
{%- if volumes | length > 0 %}

.PHONY: create/volume
create/volume:{% for volume in volumes %} create/volume/{{ volume.poolName }}/{{ volume.name }}{% endfor %}
{%- endif %}
{%- for volume in volumes %}

.PHONY: create/volume/{{ volume.poolName }}/{{ volume.name }}
create/volume/{{ volume.poolName }}/{{ volume.name }}:{% if volume.poolName in pools | map(attribute="name") %} start/pool/{{ volume.poolName }}{% endif %}{% if isinstance(volume, models.libvirt.CreateVolumeFromUploadFile) %} {{ volume.uploadFile.path }}{% endif %}
{%- if isinstance(volume, models.libvirt.CreateVolumeFromBlank) %}
	$(call create_libvirt_volume_from_blank,{{ volume.poolName }},{{ volume.name }},{{ volume.capacity }},{{ volume.format }})
{%- elif isinstance(volume, models.libvirt.CreateVolumeFromBackingVolume) %}
	$(call create_libvirt_volume_from_backing_volume,{{ volume.poolName }},{{ volume.name }},{{ volume.capacity if volume.capacity else "" }},{{ volume.format }},{{ volume.backingVolume.poolName }},{{ volume.backingVolume.name }},{{ volume.backingVolume.format }})
{%- elif isinstance(volume, models.libvirt.CreateVolumeFromUploadFile) %}
	$(call create_libvirt_volume_from_upload_file,{{ volume.poolName }},{{ volume.name }},{{ volume.capacity if volume.capacity else "" }},{{ volume.format }},{{ volume.uploadFile.path }})
{%- endif %}
{%- endfor %}

.PHONY: create/domain
create/domain: , = ,
create/domain:
	$(call create_libvirt_domain,{{ domain.name }},virt-install \
	{%- for arg in virt_install_args() %}
		{{ arg | replace(",", "$(,)") }} \
	{%- endfor %}
		--name={{ domain.name }} \
		--print-xml \
		--dry-run)

.PHONY: delete
delete:  delete/domain{% if volumes | length > 0 %} delete/volume{% endif %}{% if pools | length > 0 %} delete/pool{% endif %}

.PHONY: delete-all
delete-all: delete{% if volumes | length > 0 %} delete/volume-all{% endif %}{% if pools | length > 0 %} delete/pool-all{% endif %}

.PHONY: delete/domain
delete/domain: stop/domain
	$(call delete_libvirt_domain,{{ domain.name }})
{%- if volumes | length > 0 %}

.PHONY: delete/volume
delete/volume:{% for volume in volumes if volume.deletionPolicy == "Delete" %} delete/volume/{{ volume.poolName }}/{{ volume.name }}{% endfor %}

.PHONY: delete/volume-all
delete/volume-all: delete/volume{% for volume in volumes if volume.deletionPolicy == "Retain" %} delete/volume/{{ volume.poolName }}/{{ volume.name }}{% endfor %}
{%- endif %}
{%- for volume in volumes %}

.PHONY: delete/volume/{{ volume.poolName }}/{{ volume.name }}
delete/volume/{{ volume.poolName }}/{{ volume.name }}:
	$(call delete_libvirt_volume,{{ volume.poolName }},{{ volume.name }})
{%- endfor %}
{%- if pools | length > 0 %}

.PHONY: delete/pool
delete/pool:{% for pool in pools if pool.deletionPolicy == "Delete" %} delete/pool/{{ pool.name }}{% endfor %}

.PHONY: delete/pool-all
delete/pool-all: delete/pool{% for pool in pools if pool.deletionPolicy == "Retain" %} delete/pool/{{ pool.name }}{% endfor %}
{%- endif %}
{%- for pool in pools %}

.PHONY: delete/pool/{{ pool.name }}
delete/pool/{{ pool.name }}: stop/pool/{{ pool.name }}
	$(call delete_libvirt_pool,{{ pool.name }})
{%- endfor %}

.PHONY: start
start:{% if pools | length > 0 %} start/pool{% endif %} start/domain
{%- if pools | length > 0 %}

.PHONY: start/pool
start/pool:{% for pool in pools %} start/pool/{{ pool.name }}{% endfor %}
{%- endif %}
{%- for pool in pools %}

.PHONY: start/pool/{{ pool.name }}
start/pool/{{ pool.name }}:
	$(call start_libvirt_pool,{{ pool.name }})
{%- endfor %}

.PHONY: start/domain
start/domain:
	$(call start_libvirt_domain,{{ domain.name }})

.PHONY: stop
stop: stop/domain

.PHONY: stop/domain
stop/domain:
	$(call stop_libvirt_domain,{{ domain.name }})

.PHONY: stop-all
stop-all: stop{% if pools | length > 0 %} stop/pool{% endif %}
{%- if pools | length > 0 %}

.PHONY: stop/pool
stop/pool:{% for pool in pools %} stop/pool/{{ pool.name }}{% endfor %}
{%- endif %}
{%- for pool in pools %}

.PHONY: stop/pool/{{ pool.name }}
stop/pool/{{ pool.name }}:
	$(call stop_libvirt_pool,{{ pool.name }})
{%- endfor %}
{%- if ssh %}

.PHONY: wait-for-ready
wait-for-ready:{% if not ssh.host %} wait-for-ready/ip{% endif %} wait-for-ready/ssh
{%- if not ssh.host %}

.PHONY: wait-for-ready/ip
wait-for-ready/ip:
	until $(V1ALPHA1_IP_CMD); do sleep $(V1ALPHA1_WAIT_FOR_READY_INTERVAL_SECS); done
{%- endif %}

.PHONY: wait-for-ready/ssh
wait-for-ready/ssh:
	until {{ ssh_cmd }} -o ConnectTimeout=$(V1ALPHA1_WAIT_FOR_READY_SSH_CONNECT_TIMEOUT_SECS) $(V1ALPHA1_SSH_USER)@$(V1ALPHA1_SSH_HOST) {% if cloudInit %}cloud-init status --wait{% else %}echo OK{% endif %}; do sleep $(V1ALPHA1_WAIT_FOR_READY_INTERVAL_SECS); done
{%- endif %}

.PHONY: exec
exec: CMD := bash
exec:
	@exec $(CMD)

.PHONY: console
console:
	@virsh console --force {{ domain.name }}

.PHONY: ip
ip:
	@$(V1ALPHA1_IP_CMD)
{%- if ssh %}

.PHONY: ssh
ssh: CMD :=
ssh:
	@{{ ssh_cmd }} $(V1ALPHA1_SSH_USER)@$(V1ALPHA1_SSH_HOST) $(CMD)
{%- endif %}

define create_libvirt_domain
virsh list --all --name --persistent | ( \
	if ! grep -q '^\s*$(1)\s*$$'; \
	then \
		$(2) | tee /dev/stderr | virsh define /dev/stdin; \
	fi \
)
endef

define delete_libvirt_domain
virsh list --all --name --persistent | ( \
	if grep -q '^\s*$(1)\s*$$'; \
	then \
		virsh undefine $(1); \
	fi \
)
endef

define start_libvirt_domain
virsh list --name | ( \
	if ! grep -q '^\s*$(1)\s*$$'; \
	then \
		virsh start $(1); \
	fi \
)
endef

define stop_libvirt_domain
virsh list --name | ( \
	if grep -q '^\s*$(1)\s*$$'; \
	then \
		virsh destroy $(1); \
	fi \
)
endef
{%- if pools | length > 0 %}

define create_libvirt_pool
virsh pool-list --all --name --persistent | ( \
	if ! grep -q '^\s*$(1)\s*$$'; \
	then \
		virsh pool-define-as $(1) dir --target $(2); \
		virsh pool-autostart $(1); \
	fi \
)
endef

define delete_libvirt_pool
virsh pool-list --all --name --persistent | ( \
	if grep -q '^\s*$(1)\s*$$'; \
	then \
		virsh pool-undefine $(1); \
	fi \
)
endef

define start_libvirt_pool
virsh pool-list --name | ( \
	if ! grep -q '^\s*$(1)\s*$$'; \
	then \
		virsh pool-start --build $(1); \
	fi \
)
endef

define stop_libvirt_pool
virsh pool-list --name | ( \
	if grep -q '^\s*$(1)\s*$$'; \
	then \
		virsh pool-destroy $(1); \
	fi \
)
endef
{%- endif %}
{%- for volume in volumes if isinstance(volume, models.libvirt.CreateVolumeFromBlank) %}
{%- if loop.first %}

define create_libvirt_volume_from_blank
virsh vol-list $(1) | tail -n +3 | ( \
	if ! grep -q '^\s*$(2)\s'; \
	then \
		virsh vol-create-as $(1) $(2) $(3) --format $(4); \
	fi \
)
endef
{%- endif %}
{%- endfor %}
{%- for volume in volumes if isinstance(volume, models.libvirt.CreateVolumeFromBackingVolume) %}
{%- if loop.first %}

define create_libvirt_volume_from_backing_volume
virsh vol-list $(1) | tail -n +3 | ( \
	if ! grep -q '^\s*$(2)\s'; \
	then \
		BACKING_VOL="$$(virsh vol-path $(6) --pool $(5))"; \
		CAPACITY="$$([ -n "$(3)" ] && echo $(3) || virsh vol-dumpxml $(6) --pool $(5) --xpath '/volume/capacity/text()' | grep -o '\w*')"; \
		virsh vol-create-as $(1) $(2) $${CAPACITY} --format $(4) --backing-vol $${BACKING_VOL} --backing-vol-format $(7); \
	fi \
)
endef
{%- endif %}
{%- endfor %}
{%- for volume in volumes if isinstance(volume, models.libvirt.CreateVolumeFromUploadFile) %}
{%- if loop.first %}

define create_libvirt_volume_from_upload_file
virsh vol-list $(1) | tail -n +3 | ( \
	if ! grep -q '^\s*$(2)\s'; \
	then \
		CAPACITY="$$([ -n "$(3)" ] && echo $(3) || stat -Lc%s $(5))"; \
		virsh vol-create-as $(1) $(2) $${CAPACITY} --format $(4); \
		virsh vol-upload $(2) $(5) --pool $(1); \
	fi \
)
endef
{%- endif %}
{%- endfor %}
{%- if volumes | length > 0 %}

define delete_libvirt_volume
virsh pool-list --all --name --persistent | ( \
	if grep -q '^\s*$(1)\s*$$'; \
	then \
		virsh vol-list $(1) | tail -n +3 | ( \
			if grep -q '^\s*$(2)\s'; \
			then \
				virsh vol-delete $(2) --pool $(1); \
			fi \
		); \
	fi \
)
endef
{%- endif %}
